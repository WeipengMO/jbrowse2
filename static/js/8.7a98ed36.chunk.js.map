{"version":3,"sources":["../../../node_modules/@gmod/bed/dist/index.js","../../../node_modules/@gmod/bed/dist/autoSql.js","../../../node_modules/@gmod/bed/dist/parser.js","../../../node_modules/@gmod/bed/dist/defaultTypes.js","../../../node_modules/@gmod/bed/dist/as/autoSqlSchemas.js","../../../node_modules/@gmod/bed/dist/util.js"],"names":["obj","Object","defineProperty","exports","value","default","_default","require","__esModule","peg$SyntaxError","message","expected","found","location","this","name","Error","captureStackTrace","child","parent","ctor","constructor","prototype","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","i","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","module","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","declaration","peg$parsedeclaration","peg$startRuleFunction","peg$c1","peg$literalExpectation","peg$c3","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","f1","w","peg$c22","peg$c24","peg$c27","peg$c29","peg$c32","peg$c33","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c62","peg$c64","peg$c65","peg$classExpectation","peg$c66","peg$c67","peg$c74","peg$c75","peg$c77","peg$otherExpectation","peg$c78","peg$c79","peg$c81","peg$c82","peg$c83","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","substring","ignoreCase","peg$computePosDetails","pos","p","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","peg$buildStructuredError","s0","s2","s4","s6","s8","s10","s12","peg$parse_","peg$parsedeclareType","peg$parsedeclareName","peg$parsecomment","s1","s3","peg$parsefield","fds","unshift","peg$parsefieldList","comment","fields","substr","peg$parsename","peg$parseindexType","peg$parsenonQuotedString","peg$parseinternalComment","peg$parsecommentStart","s5","s7","s9","s11","s13","peg$parsefieldType","test","charAt","parseInt","peg$parsenumber","peg$parsefieldSize","size","peg$c30","peg$parsefieldValues","vals","peg$c31","_autoSql","_interopRequireDefault","_defaultTypes","_util","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","strandMap","isBed12Like","_fields$","Number","isNaN","split","filter","f","BED","args","arguments","undefined","autoSql","detectTypes","defaultBedSchema","attemptDefaultBed","protoProps","staticProps","opts","uniqueId","isArray","startsWith","concat","feature","autoField","columnVal","isNumeric","arrayIsNumeric","num","pop","map","str","fieldNames","fromEntries","chromStart","chromEnd","parseFloat","field4","score","field5","strand","chrom","decodeURIComponent","_typeof","Symbol","iterator","types","nodeInterop","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","_interopRequireWildcard","WeakMap","cacheBabelInterop","cacheNodeInterop","_slicedToArray","arr","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","next","done","err","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","from","_unsupportedIterableToArray","_nonIterableRest","len","arr2","entries","_ref","_ref2","val","trim","mafSummary","mafFrames","bigPsl","bigNarrowPeak","bigMaf","bigLink","bigInteract","bigGenePred","bigChain","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","apply","_objectSpread","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","numericTypes","includes"],"mappings":"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","file":"static/js/8.7a98ed36.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = _parser.default;\nexports.default = _default;","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n          i;\n\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i,\n        j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n      peg$startRuleFunctions = {\n    declaration: peg$parsedeclaration\n  },\n      peg$startRuleFunction = peg$parsedeclaration,\n      peg$c0 = \"(\",\n      peg$c1 = peg$literalExpectation(\"(\", false),\n      peg$c2 = \")\",\n      peg$c3 = peg$literalExpectation(\")\", false),\n      peg$c4 = function peg$c4(type, name, comment, fields) {\n    return {\n      type: type,\n      name: name,\n      comment: comment,\n      fields: fields\n    };\n  },\n      peg$c5 = \"simple\",\n      peg$c6 = peg$literalExpectation(\"simple\", false),\n      peg$c7 = \"object\",\n      peg$c8 = peg$literalExpectation(\"object\", false),\n      peg$c9 = \"table\",\n      peg$c10 = peg$literalExpectation(\"table\", false),\n      peg$c11 = \"auto\",\n      peg$c12 = peg$literalExpectation(\"auto\", false),\n      peg$c13 = \"primary\",\n      peg$c14 = peg$literalExpectation(\"primary\", false),\n      peg$c15 = \"index\",\n      peg$c16 = peg$literalExpectation(\"index\", false),\n      peg$c17 = \"unique\",\n      peg$c18 = peg$literalExpectation(\"unique\", false),\n      peg$c19 = function peg$c19(f1, w) {\n    return w;\n  },\n      peg$c20 = function peg$c20(f1, fds) {\n    if (f1.name) {\n      fds.unshift(f1);\n    }\n\n    return fds;\n  },\n      peg$c21 = \"#\",\n      peg$c22 = peg$literalExpectation(\"#\", false),\n      peg$c23 = \";\",\n      peg$c24 = peg$literalExpectation(\";\", false),\n      peg$c25 = function peg$c25(type, name, comment) {\n    return {\n      type: type,\n      name: name,\n      comment: comment\n    };\n  },\n      peg$c26 = \"[\",\n      peg$c27 = peg$literalExpectation(\"[\", false),\n      peg$c28 = \"]\",\n      peg$c29 = peg$literalExpectation(\"]\", false),\n      peg$c30 = function peg$c30(type, size, name, comment) {\n    return {\n      type: type,\n      size: size,\n      name: name,\n      comment: comment\n    };\n  },\n      peg$c31 = function peg$c31(type, vals, name, comment) {\n    return {\n      type: type,\n      vals: vals,\n      name: name,\n      comment: comment\n    };\n  },\n      peg$c32 = \",\",\n      peg$c33 = peg$literalExpectation(\",\", false),\n      peg$c34 = function peg$c34(f1, fds) {\n    fds.unshift(f1);\n    return fds;\n  },\n      peg$c35 = \"int\",\n      peg$c36 = peg$literalExpectation(\"int\", false),\n      peg$c37 = \"uint\",\n      peg$c38 = peg$literalExpectation(\"uint\", false),\n      peg$c39 = \"short\",\n      peg$c40 = peg$literalExpectation(\"short\", false),\n      peg$c41 = \"ushort\",\n      peg$c42 = peg$literalExpectation(\"ushort\", false),\n      peg$c43 = \"byte\",\n      peg$c44 = peg$literalExpectation(\"byte\", false),\n      peg$c45 = \"ubyte\",\n      peg$c46 = peg$literalExpectation(\"ubyte\", false),\n      peg$c47 = \"float\",\n      peg$c48 = peg$literalExpectation(\"float\", false),\n      peg$c49 = \"char\",\n      peg$c50 = peg$literalExpectation(\"char\", false),\n      peg$c51 = \"string\",\n      peg$c52 = peg$literalExpectation(\"string\", false),\n      peg$c53 = \"lstring\",\n      peg$c54 = peg$literalExpectation(\"lstring\", false),\n      peg$c55 = \"enum\",\n      peg$c56 = peg$literalExpectation(\"enum\", false),\n      peg$c57 = \"double\",\n      peg$c58 = peg$literalExpectation(\"double\", false),\n      peg$c59 = \"bigint\",\n      peg$c60 = peg$literalExpectation(\"bigint\", false),\n      peg$c61 = \"set\",\n      peg$c62 = peg$literalExpectation(\"set\", false),\n      peg$c63 = function peg$c63(t, n) {\n    return t + ' ' + n;\n  },\n      peg$c64 = /^[a-zA-Z_]/,\n      peg$c65 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\"], false, false),\n      peg$c66 = /^[a-zA-Z0-9_]/,\n      peg$c67 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c68 = function peg$c68(t) {\n    return text();\n  },\n      peg$c69 = \"\\\"\",\n      peg$c70 = peg$literalExpectation(\"\\\"\", false),\n      peg$c71 = /^[^\"]/,\n      peg$c72 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c73 = function peg$c73(t) {\n    return t.join('');\n  },\n      peg$c74 = /^[^\\n\\r]/,\n      peg$c75 = peg$classExpectation([\"\\n\", \"\\r\"], true, false),\n      peg$c76 = function peg$c76(t) {\n    return t.join('').replace(/^\"/, '').replace(/\"$/, '');\n  },\n      peg$c77 = peg$otherExpectation(\"integer\"),\n      peg$c78 = /^[0-9]/,\n      peg$c79 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c80 = function peg$c80() {\n    return parseInt(text(), 10);\n  },\n      peg$c81 = peg$otherExpectation(\"whitespace\"),\n      peg$c82 = /^[ \\t\\n\\r]/,\n      peg$c83 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n        p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parsedeclaration() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedeclareType();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsedeclareName();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecomment();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 40) {\n                    s8 = peg$c0;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c1);\n                    }\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse_();\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsefieldList();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse_();\n\n                        if (s11 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s12 = peg$c2;\n                            peg$currPos++;\n                          } else {\n                            s12 = peg$FAILED;\n\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$c3);\n                            }\n                          }\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse_();\n\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c4(s2, s4, s6, s10);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclareType() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6) === peg$c5) {\n      s0 = peg$c5;\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c6);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 6) === peg$c7) {\n        s0 = peg$c7;\n        peg$currPos += 6;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c8);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c9) {\n          s0 = peg$c9;\n          peg$currPos += 5;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c10);\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclareName() {\n    var s0, s1, s2, s3;\n    s0 = peg$parsename();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsename();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseindexType();\n\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsename();\n\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c11) {\n            s2 = peg$c11;\n            peg$currPos += 4;\n          } else {\n            s2 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c12);\n            }\n          }\n\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsename();\n\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseindexType();\n\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 4) === peg$c11) {\n                s3 = peg$c11;\n                peg$currPos += 4;\n              } else {\n                s3 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c12);\n                }\n              }\n\n              if (s3 !== peg$FAILED) {\n                s1 = [s1, s2, s3];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseindexType() {\n    var s0;\n\n    if (input.substr(peg$currPos, 7) === peg$c13) {\n      s0 = peg$c13;\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c14);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c15) {\n        s0 = peg$c15;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c16);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c17) {\n          s0 = peg$c17;\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c18);\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n    s0 = peg$parsenonQuotedString();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parse_();\n    }\n\n    return s0;\n  }\n\n  function peg$parsefieldList() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parsefield();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse_();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsefield();\n\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c19(s1, s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse_();\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsefield();\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c19(s1, s6);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c20(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommentStart() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s0 = peg$c21;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinternalComment() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecommentStart();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenonQuotedString();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefield() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n    s1 = peg$parsefieldType();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsename();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 59) {\n              s5 = peg$c23;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c24);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecomment();\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c25(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsefieldType();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s3 = peg$c26;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c27);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsefieldSize();\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 93) {\n                    s7 = peg$c28;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c29);\n                    }\n                  }\n\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse_();\n\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsename();\n\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse_();\n\n                        if (s10 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 59) {\n                            s11 = peg$c23;\n                            peg$currPos++;\n                          } else {\n                            s11 = peg$FAILED;\n\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$c24);\n                            }\n                          }\n\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse_();\n\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parsecomment();\n\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c30(s1, s5, s9, s13);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsefieldType();\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s3 = peg$c0;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c1);\n              }\n            }\n\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsefieldValues();\n\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse_();\n\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s7 = peg$c2;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c3);\n                      }\n                    }\n\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse_();\n\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsename();\n\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse_();\n\n                          if (s10 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 59) {\n                              s11 = peg$c23;\n                              peg$currPos++;\n                            } else {\n                              s11 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                              }\n                            }\n\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse_();\n\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parsecomment();\n\n                                if (s13 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c31(s1, s5, s9, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinternalComment();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefieldValues() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parsename();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s4 = peg$c32;\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c33);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsename();\n\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c19(s1, s6);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s4 = peg$c32;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c33);\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsename();\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c19(s1, s6);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c34(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefieldType() {\n    var s0, s1, s2, s3;\n\n    if (input.substr(peg$currPos, 3) === peg$c35) {\n      s0 = peg$c35;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c36);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c37) {\n        s0 = peg$c37;\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c38);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c39) {\n          s0 = peg$c39;\n          peg$currPos += 5;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c40);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c41) {\n            s0 = peg$c41;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c42);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c43) {\n              s0 = peg$c43;\n              peg$currPos += 4;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c44);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5) === peg$c45) {\n                s0 = peg$c45;\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c46);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5) === peg$c47) {\n                  s0 = peg$c47;\n                  peg$currPos += 5;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c48);\n                  }\n                }\n\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4) === peg$c49) {\n                    s0 = peg$c49;\n                    peg$currPos += 4;\n                  } else {\n                    s0 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c50);\n                    }\n                  }\n\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6) === peg$c51) {\n                      s0 = peg$c51;\n                      peg$currPos += 6;\n                    } else {\n                      s0 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c52);\n                      }\n                    }\n\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7) === peg$c53) {\n                        s0 = peg$c53;\n                        peg$currPos += 7;\n                      } else {\n                        s0 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c54);\n                        }\n                      }\n\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4) === peg$c55) {\n                          s0 = peg$c55;\n                          peg$currPos += 4;\n                        } else {\n                          s0 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c56);\n                          }\n                        }\n\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 6) === peg$c57) {\n                            s0 = peg$c57;\n                            peg$currPos += 6;\n                          } else {\n                            s0 = peg$FAILED;\n\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$c58);\n                            }\n                          }\n\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6) === peg$c59) {\n                              s0 = peg$c59;\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c60);\n                              }\n                            }\n\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 3) === peg$c61) {\n                                s0 = peg$c61;\n                                peg$currPos += 3;\n                              } else {\n                                s0 = peg$FAILED;\n\n                                if (peg$silentFails === 0) {\n                                  peg$fail(peg$c62);\n                                }\n                              }\n\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                s1 = peg$parsedeclareType();\n\n                                if (s1 !== peg$FAILED) {\n                                  s2 = peg$parse_();\n\n                                  if (s2 !== peg$FAILED) {\n                                    s3 = peg$parsedeclareName();\n\n                                    if (s3 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c63(s1, s3);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefieldSize() {\n    var s0;\n    s0 = peg$parsenumber();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsename();\n    }\n\n    return s0;\n  }\n\n  function peg$parsename() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (peg$c64.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c65);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n\n      if (peg$c66.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c67);\n        }\n      }\n\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n\n        if (peg$c66.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c67);\n          }\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c68(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsequotedString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c69;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c70);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n\n      if (peg$c71.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c72);\n        }\n      }\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n\n        if (peg$c71.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c72);\n          }\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c69;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c70);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c73(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenonQuotedString() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c74.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c75);\n      }\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n\n      if (peg$c74.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c75);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c76(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n\n      if (peg$c78.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c79);\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c78.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c79);\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c80();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c77);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = [];\n\n    if (peg$c82.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c83);\n      }\n    }\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n\n      if (peg$c82.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c83);\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c81);\n      }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _autoSql = _interopRequireDefault(require(\"./autoSql\"));\n\nvar _defaultTypes = _interopRequireDefault(require(\"./defaultTypes\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar strandMap = {\n  \".\": 0,\n  \"-\": -1,\n  \"+\": 1\n}; // heuristic that a BED file is BED12 like...the number in col 10 is blockCount-like\n\nfunction isBed12Like(fields) {\n  var _fields$;\n\n  return fields.length >= 12 && !Number.isNaN(parseInt(fields[9], 10)) && ((_fields$ = fields[10]) === null || _fields$ === void 0 ? void 0 : _fields$.split(\",\").filter(function (f) {\n    return !!f;\n  }).length) === parseInt(fields[9], 10);\n}\n\nvar BED = /*#__PURE__*/function () {\n  function BED() {\n    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BED);\n\n    if (args.autoSql) {\n      this.autoSql = (0, _util.detectTypes)(_autoSql.default.parse(args.autoSql));\n    } else if (args.type) {\n      if (!_defaultTypes.default[args.type]) {\n        throw new Error(\"Type not found\");\n      }\n\n      this.autoSql = (0, _util.detectTypes)(_defaultTypes.default[args.type]);\n    } else {\n      this.autoSql = (0, _util.detectTypes)(_defaultTypes.default.defaultBedSchema);\n      this.attemptDefaultBed = true;\n    }\n  }\n  /*\n   * parses a line of text as a BED line with the loaded autoSql schema\n   *\n   * @param line - a BED line as tab delimited text or array\n   * @param opts - supply opts.uniqueId\n   * @return a object representing a feature\n   */\n\n\n  _createClass(BED, [{\n    key: \"parseLine\",\n    value: function parseLine(line) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var autoSql = this.autoSql;\n      var uniqueId = opts.uniqueId;\n      var fields = line;\n\n      if (!Array.isArray(line)) {\n        if (line.startsWith(\"track\") || line.startsWith(\"browser\")) {\n          throw new Error(\"track and browser line parsing is not supported, please filter:\\n\".concat(line));\n        }\n\n        fields = line.split(\"\\t\");\n      }\n\n      var feature = {};\n\n      if (!this.attemptDefaultBed || this.attemptDefaultBed && isBed12Like(fields)) {\n        for (var i = 0; i < autoSql.fields.length; i++) {\n          var autoField = autoSql.fields[i];\n          var columnVal = fields[i];\n          var isNumeric = autoField.isNumeric,\n              isArray = autoField.isArray,\n              arrayIsNumeric = autoField.arrayIsNumeric,\n              name = autoField.name;\n\n          if (columnVal === null || columnVal === undefined) {\n            break;\n          }\n\n          if (columnVal !== \".\") {\n            if (isNumeric) {\n              var num = Number(columnVal);\n              columnVal = Number.isNaN(num) ? columnVal : num;\n            } else if (isArray) {\n              columnVal = columnVal.split(\",\");\n\n              if (columnVal[columnVal.length - 1] === \"\") {\n                columnVal.pop();\n              }\n\n              if (arrayIsNumeric) {\n                columnVal = columnVal.map(function (str) {\n                  return Number(str);\n                });\n              }\n            }\n\n            feature[name] = columnVal;\n          }\n        }\n      } else {\n        var fieldNames = [\"chrom\", \"chromStart\", \"chromEnd\", \"name\"];\n        feature = Object.fromEntries(fields.map(function (f, i) {\n          return [fieldNames[i] || \"field\" + i, f];\n        }));\n        feature.chromStart = +feature.chromStart;\n        feature.chromEnd = +feature.chromEnd;\n\n        if (!Number.isNaN(Number.parseFloat(feature.field4))) {\n          feature.score = +feature.field4;\n          delete feature.field4;\n        }\n\n        if (feature.field5 === \"+\" || feature.field5 === \"-\") {\n          feature.strand = feature.field5;\n          delete feature.field5;\n        }\n      }\n\n      if (uniqueId) {\n        feature.uniqueId = uniqueId;\n      }\n\n      feature.strand = strandMap[feature.strand] || 0;\n      feature.chrom = decodeURIComponent(feature.chrom);\n      return feature;\n    }\n  }]);\n\n  return BED;\n}();\n\nexports.default = BED;","\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _autoSql = require(\"./autoSql\");\n\nvar types = _interopRequireWildcard(require(\"./as/autoSqlSchemas\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _default = Object.fromEntries(Object.entries(types).map(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      val = _ref2[1];\n\n  return [key, (0, _autoSql.parse)(val.trim())];\n}));\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mafSummary = exports.mafFrames = exports.defaultBedSchema = exports.bigPsl = exports.bigNarrowPeak = exports.bigMaf = exports.bigLink = exports.bigInteract = exports.bigGenePred = exports.bigChain = void 0;\nvar bigChain = \"table bigChain\\n\\\"bigChain pairwise alignment\\\"\\n    (\\n    string chrom;       \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart;  \\\"Start position in chromosome\\\"\\n    uint   chromEnd;    \\\"End position in chromosome\\\"\\n    string name;        \\\"Name or ID of item, ideally both human readable and unique\\\"\\n    uint score;         \\\"Score (0-1000)\\\"\\n    char[1] strand;     \\\"+ or - for strand\\\"\\n    uint tSize;         \\\"size of target sequence\\\"\\n    string qName;       \\\"name of query sequence\\\"\\n    uint qSize;         \\\"size of query sequence\\\"\\n    uint qStart;        \\\"start of alignment on query sequence\\\"\\n    uint qEnd;          \\\"end of alignment on query sequence\\\"\\n    uint chainScore;    \\\"score from chain\\\"\\n    )\";\nexports.bigChain = bigChain;\nvar bigGenePred = \"table bigGenePred\\n\\\"bigGenePred gene models\\\"\\n   (\\n   string chrom;       \\\"Reference sequence chromosome or scaffold\\\"\\n   uint   chromStart;  \\\"Start position in chromosome\\\"\\n   uint   chromEnd;    \\\"End position in chromosome\\\"\\n   string name;        \\\"Name or ID of item, ideally both human readable and unique\\\"\\n   uint score;         \\\"Score (0-1000)\\\"\\n   char[1] strand;     \\\"+ or - for strand\\\"\\n   uint thickStart;    \\\"Start of where display should be thick (start codon)\\\"\\n   uint thickEnd;      \\\"End of where display should be thick (stop codon)\\\"\\n   uint reserved;       \\\"RGB value (use R,G,B string in input file)\\\"\\n   int blockCount;     \\\"Number of blocks\\\"\\n   int[blockCount] blockSizes; \\\"Comma separated list of block sizes\\\"\\n   int[blockCount] chromStarts; \\\"Start positions relative to chromStart\\\"\\n   string name2;       \\\"Alternative/human readable name\\\"\\n   string cdsStartStat; \\\"Status of CDS start annotation (none, unknown, incomplete, or complete)\\\"\\n   string cdsEndStat;   \\\"Status of CDS end annotation (none, unknown, incomplete, or complete)\\\"\\n   int[blockCount] exonFrames; \\\"Exon frame {0,1,2}, or -1 if no frame for exon\\\"\\n   string type;        \\\"Transcript type\\\"\\n   string geneName;    \\\"Primary identifier for gene\\\"\\n   string geneName2;   \\\"Alternative/human readable gene name\\\"\\n   string geneType;    \\\"Gene type\\\"\\n   )\";\nexports.bigGenePred = bigGenePred;\nvar bigInteract = \"table interact\\n\\\"interaction between two regions\\\"\\n    (\\n    string chrom;        \\\"Chromosome (or contig, scaffold, etc.). For interchromosomal, use 2 records\\\"\\n    uint chromStart;     \\\"Start position of lower region. For interchromosomal, set to chromStart of this region\\\"\\n    uint chromEnd;       \\\"End position of upper region. For interchromosomal, set to chromEnd of this region\\\"\\n    string name;         \\\"Name of item, for display.  Usually 'sourceName/targetName/exp' or empty\\\"\\n    uint score;          \\\"Score (0-1000)\\\"\\n    double value;        \\\"Strength of interaction or other data value. Typically basis for score\\\"\\n    string exp;          \\\"Experiment name (metadata for filtering). Use . if not applicable\\\"\\n    string color;        \\\"Item color.  Specified as r,g,b or hexadecimal #RRGGBB or html color name, as in //www.w3.org/TR/css3-color/#html4. Use 0 and spectrum setting to shade by score\\\"\\n    string sourceChrom;  \\\"Chromosome of source region (directional) or lower region. For non-directional interchromosomal, chrom of this region.\\\"\\n    uint sourceStart;    \\\"Start position in chromosome of source/lower/this region\\\"\\n    uint sourceEnd;      \\\"End position in chromosome of source/lower/this region\\\"\\n    string sourceName;   \\\"Identifier of source/lower/this region\\\"\\n    string sourceStrand; \\\"Orientation of source/lower/this region: + or -.  Use . if not applicable\\\"\\n    string targetChrom;  \\\"Chromosome of target region (directional) or upper region. For non-directional interchromosomal, chrom of other region\\\"\\n    uint targetStart;    \\\"Start position in chromosome of target/upper/this region\\\"\\n    uint targetEnd;      \\\"End position in chromosome of target/upper/this region\\\"\\n    string targetName;   \\\"Identifier of target/upper/this region\\\"\\n    string targetStrand; \\\"Orientation of target/upper/this region: + or -.  Use . if not applicable\\\"\\n\\n    )\";\nexports.bigInteract = bigInteract;\nvar bigLink = \"table bigLink\\n\\\"bigLink pairwise alignment\\\"\\n    (\\n    string chrom;       \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart;  \\\"Start position in chromosome\\\"\\n    uint   chromEnd;    \\\"End position in chromosome\\\"\\n    string name;        \\\"Name or ID of item, ideally both human readable and unique\\\"\\n    uint qStart;        \\\"start of alignment on query sequence\\\"\\n    )\";\nexports.bigLink = bigLink;\nvar bigMaf = \"table bedMaf\\n\\\"Bed3 with MAF block\\\"\\n    (\\n    string chrom;      \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart; \\\"Start position in chromosome\\\"\\n    uint   chromEnd;   \\\"End position in chromosome\\\"\\n    lstring mafBlock;   \\\"MAF block\\\"\\n    )\";\nexports.bigMaf = bigMaf;\nvar bigNarrowPeak = \"table bigNarrowPeak\\n\\\"BED6+4 Peaks of signal enrichment based on pooled, normalized (interpreted) data.\\\"\\n(\\n    string chrom;        \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart;   \\\"Start position in chromosome\\\"\\n    uint   chromEnd;     \\\"End position in chromosome\\\"\\n    string name;\\t \\\"Name given to a region (preferably unique). Use . if no name is assigned\\\"\\n    uint   score;        \\\"Indicates how dark the peak will be displayed in the browser (0-1000) \\\"\\n    char[1]  strand;     \\\"+ or - or . for unknown\\\"\\n    float  signalValue;  \\\"Measurement of average enrichment for the region\\\"\\n    float  pValue;       \\\"Statistical significance of signal value (-log10). Set to -1 if not used.\\\"\\n    float  qValue;       \\\"Statistical significance with multiple-test correction applied (FDR -log10). Set to -1 if not used.\\\"\\n    int   peak;         \\\"Point-source called for this peak; 0-based offset from chromStart. Set to -1 if no point-source called.\\\"\\n)\";\nexports.bigNarrowPeak = bigNarrowPeak;\nvar bigPsl = \"table bigPsl\\n\\\"bigPsl pairwise alignment\\\"\\n    (\\n    string chrom;       \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart;  \\\"Start position in chromosome\\\"\\n    uint   chromEnd;    \\\"End position in chromosome\\\"\\n    string name;        \\\"Name or ID of item, ideally both human readable and unique\\\"\\n    uint score;         \\\"Score (0-1000)\\\"\\n    char[1] strand;     \\\"+ or - indicates whether the query aligns to the + or - strand on the reference\\\"\\n    uint thickStart;    \\\"Start of where display should be thick (start codon)\\\"\\n    uint thickEnd;      \\\"End of where display should be thick (stop codon)\\\"\\n    uint reserved;       \\\"RGB value (use R,G,B string in input file)\\\"\\n    int blockCount;     \\\"Number of blocks\\\"\\n    int[blockCount] blockSizes; \\\"Comma separated list of block sizes\\\"\\n    int[blockCount] chromStarts; \\\"Start positions relative to chromStart\\\"\\n\\n    uint    oChromStart;\\\"Start position in other chromosome\\\"\\n    uint    oChromEnd;  \\\"End position in other chromosome\\\"\\n    char[1] oStrand;    \\\"+ or -, - means that psl was reversed into BED-compatible coordinates\\\"\\n    uint    oChromSize; \\\"Size of other chromosome.\\\"\\n    int[blockCount] oChromStarts; \\\"Start positions relative to oChromStart or from oChromStart+oChromSize depending on strand\\\"\\n\\n    lstring  oSequence;  \\\"Sequence on other chrom (or empty)\\\"\\n    string   oCDS;       \\\"CDS in NCBI format\\\"\\n\\n    uint    chromSize;\\\"Size of target chromosome\\\"\\n\\n    uint match;        \\\"Number of bases matched.\\\"\\n    uint misMatch; \\\" Number of bases that don't match \\\"\\n    uint repMatch; \\\" Number of bases that match but are part of repeats \\\"\\n    uint nCount;   \\\" Number of 'N' bases \\\"\\n    uint seqType;    \\\"0=empty, 1=nucleotide, 2=amino_acid\\\"\\n    )\";\nexports.bigPsl = bigPsl;\nvar defaultBedSchema = \"table defaultBedSchema\\n\\\"BED12\\\"\\n    (\\n    string chrom;      \\\"The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold (e.g. scaffold10671).\\\"\\n    uint   chromStart; \\\"The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered 0.\\\"\\n    uint   chromEnd;   \\\"The ending position of the feature in the chromosome or scaffold. The chromEnd base is not included in the display of the feature. For example, the first 100 bases of a chromosome are defined as chromStart=0, chromEnd=100, and span the bases numbered 0-99.\\\"\\n    string   name;   \\\"Defines the name of the BED line.\\\"\\n    float   score;   \\\"Feature score, doesn't care about the 0-1000 limit as in bed\\\"\\n    char   strand;   \\\"Defines the strand. Either '.' (=no strand) or '+' or '-'\\\"\\n    uint thickStart; \\\"The starting position at which the feature is drawn thickly (for example, the start codon in gene displays). When there is no thick part, thickStart and thickEnd are usually set to the chromStart position.\\\"\\n    uint thickEnd; \\\"The ending position at which the feature is drawn thickly (for example the stop codon in gene displays).\\\"\\n    string itemRgb; \\\"An RGB value of the form R,G,B (e.g. 255,0,0). \\\"\\n    uint blockCount; \\\" The number of blocks (exons) in the BED line.\\\"\\n    uint[blockCount] blockSizes; \\\" A comma-separated list of the block sizes. The number of items in this list should correspond to blockCount.\\\"\\n    uint[blockCount] blockStarts; \\\"A comma-separated list of block starts. All of the blockStart positions should be calculated relative to chromStart. The number of items in this list should correspond to blockCount.\\\"\\n    )\";\nexports.defaultBedSchema = defaultBedSchema;\nvar mafFrames = \"table mafFrames\\n\\\"codon frame assignment for MAF components\\\"\\n    (\\n    string chrom;      \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart; \\\"Start range in chromosome\\\"\\n    uint   chromEnd;   \\\"End range in chromosome\\\"\\n    string src;        \\\"Name of sequence source in MAF\\\"\\n    ubyte frame;       \\\"frame (0,1,2) for first base(+) or last bast(-)\\\"\\n    char[1] strand;    \\\"+ or -\\\"\\n    string name;       \\\"Name of gene used to define frame\\\"\\n    int    prevFramePos;  \\\"target position of the previous base (in transcription direction) that continues this frame, or -1 if none, or frame not contiguous\\\"\\n    int    nextFramePos;  \\\"target position of the next base (in transcription direction) that continues this frame, or -1 if none, or frame not contiguous\\\"\\n    ubyte  isExonStart;  \\\"does this start the CDS portion of an exon?\\\"\\n    ubyte  isExonEnd;    \\\"does this end the CDS portion of an exon?\\\"\\n    )\";\nexports.mafFrames = mafFrames;\nvar mafSummary = \"table mafSummary\\n\\\"Positions and scores for alignment blocks\\\"\\n    (\\n    string chrom;      \\\"Reference sequence chromosome or scaffold\\\"\\n    uint   chromStart; \\\"Start position in chromosome\\\"\\n    uint   chromEnd;   \\\"End position in chromosome\\\"\\n    string src;        \\\"Sequence name or database of alignment\\\"\\n    float  score;      \\\"Floating point score.\\\"\\n    char[1] leftStatus;  \\\"Gap/break annotation for preceding block\\\"\\n    char[1] rightStatus; \\\"Gap/break annotation for following block\\\"\\n    )\";\nexports.mafSummary = mafSummary;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectTypes = detectTypes;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * adds some type annotations to the autoSql schema\n * for numeric fields ['uint', 'int', 'float', 'long'] \"isNumeric\" is added\n * for array types \"isArray\" is added\n * for numeric array types \"isArray\" and \"arrayIsNumeric\" is set\n *\n * @param autoSql - an autoSql schema from the peg parser\n * @return autoSql with type annotations added\n */\nfunction detectTypes(autoSql) {\n  var numericTypes = ['uint', 'int', 'float', 'long'];\n  var fields = autoSql.fields.map(function (autoField) {\n    var type = {};\n\n    if (!autoField.size && numericTypes.includes(autoField.type)) {\n      type.isNumeric = true;\n    }\n\n    if (autoField.size && autoField.type !== 'char') {\n      type.isArray = true;\n    }\n\n    if (autoField.size && numericTypes.includes(autoField.type)) {\n      type.arrayIsNumeric = true;\n    }\n\n    return _objectSpread(_objectSpread({}, autoField), type);\n  });\n  return _objectSpread(_objectSpread({}, autoSql), {}, {\n    fields: fields\n  });\n}"],"sourceRoot":""}