{"version":3,"sources":["../../../node_modules/@material-ui/icons/Create.js","../../../node_modules/@material-ui/icons/ArrowBackIos.js","../../../plugins/data-management/src/AssemblyManager/AssemblyTable.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyAddForm.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyEditor.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyManager.tsx"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","useStyles","makeStyles","table","minWidth","minHeight","buttonCell","padding","button","display","AssemblyTable","observer","rootModel","setIsAssemblyBeingEdited","setAssemblyBeingEdited","classes","rows","jbrowse","assemblies","map","assembly","name","readConfObject","displayName","aliases","TableRow","key","TableCell","toString","className","IconButton","data-testid","onClick","color","removeAssemblyConf","removeAssembly","TableContainer","component","Paper","Table","TableHead","Typography","variant","TableBody","theme","root","flexGrow","overflow","spacing","paper","margin","createButton","marginTop","justifyContent","paperContent","flex","AdapterSelector","adapterSelection","setAdapterSelection","adapterTypes","TextField","label","select","helperText","fullWidth","onChange","event","target","str","MenuItem","AdapterInput","fastaLocation","setFastaLocation","faiLocation","setFaiLocation","gziLocation","setGziLocation","twoBitLocation","setTwoBitLocation","chromSizesLocation","setChromSizesLocation","Grid","container","item","FileSelector","location","setLocation","loc","AssemblyAddForm","setFormOpen","useState","assemblyName","setAssemblyName","assemblyDisplayName","setAssemblyDisplayName","uri","id","inputProps","Button","startIcon","newAssembly","session","notify","sequence","adapter","type","addAssemblyConf","AssemblyEditor","model","titleBox","backgroundColor","palette","primary","main","textAlign","dialogContent","width","backButton","position","left","top","closeButton","right","grey","AssemblyManager","onClose","isFormOpen","isAssemblyBeingEdited","assemblyBeingEdited","showAssemblyTable","Dialog","open","DialogTitle","aria-label","undefined","returnAssemblyName","DialogContent","DialogActions"],"mappings":"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","file":"static/js/26.16dfd5c1.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Create');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11.67 3.87L9.9 2.1 0 12l9.9 9.9 1.77-1.77L3.54 12z\"\n}), 'ArrowBackIos');\n\nexports.default = _default;","import React from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\n\nimport CreateIcon from '@material-ui/icons/Create'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\n\n// local\nimport { readConfObject } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles(() => ({\n  table: {\n    minWidth: 500,\n    minHeight: 150,\n  },\n  buttonCell: {\n    padding: 3,\n  },\n  button: {\n    display: 'inline-block',\n    padding: 3,\n    minHeight: 0,\n    minWidth: 0,\n  },\n}))\n\nconst AssemblyTable = observer(\n  ({\n    rootModel,\n    setIsAssemblyBeingEdited,\n    setAssemblyBeingEdited,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    setIsAssemblyBeingEdited(arg: boolean): void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setAssemblyBeingEdited(arg: any): void\n  }) => {\n    const classes = useStyles()\n\n    function removeAssembly(name: string) {\n      rootModel.jbrowse.removeAssemblyConf(name)\n    }\n\n    const rows = rootModel.jbrowse.assemblies.map(\n      (assembly: AnyConfigurationModel) => {\n        const name = readConfObject(assembly, 'name')\n        const displayName = readConfObject(assembly, 'displayName')\n        const aliases = readConfObject(assembly, 'aliases')\n        return (\n          <TableRow key={name}>\n            <TableCell>{name}</TableCell>\n            <TableCell>{displayName}</TableCell>\n            <TableCell>{aliases ? aliases.toString() : ''}</TableCell>\n            <TableCell className={classes.buttonCell}>\n              <IconButton\n                data-testid={`${name}-edit`}\n                className={classes.button}\n                onClick={() => {\n                  setIsAssemblyBeingEdited(true)\n                  setAssemblyBeingEdited(assembly)\n                }}\n              >\n                <CreateIcon color=\"primary\" />\n              </IconButton>\n              <IconButton\n                data-testid={`${name}-delete`}\n                className={classes.button}\n                onClick={() => {\n                  removeAssembly(name)\n                }}\n              >\n                <DeleteIcon color=\"error\" />\n              </IconButton>\n            </TableCell>\n          </TableRow>\n        )\n      },\n    )\n\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography variant=\"h5\">Name</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Display name</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Aliases</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Actions</Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{rows}</TableBody>\n        </Table>\n      </TableContainer>\n    )\n  },\n)\n\nexport default AssemblyTable\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport FileSelector from '@jbrowse/core/ui/FileSelector'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport {\n  Button,\n  Grid,\n  MenuItem,\n  Paper,\n  TextField,\n  makeStyles,\n} from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3),\n  },\n  paper: {\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2),\n  },\n  createButton: {\n    marginTop: '1em',\n    justifyContent: 'center',\n  },\n  paperContent: {\n    flex: 'auto',\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(1),\n    overflow: 'auto',\n  },\n}))\n\nconst AdapterSelector = observer(\n  ({\n    adapterSelection,\n    setAdapterSelection,\n    adapterTypes,\n  }: {\n    adapterSelection: string\n    setAdapterSelection: Function\n    adapterTypes: string[]\n  }) => {\n    return (\n      <TextField\n        value={adapterSelection}\n        label=\"Type\"\n        select\n        helperText=\"Type of adapter to use\"\n        fullWidth\n        onChange={event => {\n          setAdapterSelection(event.target.value)\n        }}\n      >\n        {adapterTypes.map(str => (\n          <MenuItem key={str} value={str}>\n            {str}\n          </MenuItem>\n        ))}\n      </TextField>\n    )\n  },\n)\n\nconst AdapterInput = observer(\n  ({\n    adapterSelection,\n    fastaLocation,\n    setFastaLocation,\n    faiLocation,\n    setFaiLocation,\n    gziLocation,\n    setGziLocation,\n    twoBitLocation,\n    setTwoBitLocation,\n    chromSizesLocation,\n    setChromSizesLocation,\n  }: {\n    adapterSelection: string\n    fastaLocation: FileLocation\n    setFastaLocation: Function\n    faiLocation: FileLocation\n    setFaiLocation: Function\n    gziLocation: FileLocation\n    setGziLocation: Function\n    twoBitLocation: FileLocation\n    setTwoBitLocation: Function\n    chromSizesLocation: FileLocation\n    setChromSizesLocation: Function\n  }) => {\n    if (\n      adapterSelection === 'IndexedFastaAdapter' ||\n      adapterSelection === 'BgzipFastaAdapter'\n    ) {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"fastaLocation\"\n              location={fastaLocation}\n              setLocation={loc => setFastaLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"faiLocation\"\n              location={faiLocation}\n              setLocation={loc => setFaiLocation(loc)}\n            />\n          </Grid>\n          {adapterSelection === 'BgzipFastaAdapter' ? (\n            <Grid item>\n              <FileSelector\n                name=\"gziLocation\"\n                location={gziLocation}\n                setLocation={loc => setGziLocation(loc)}\n              />\n            </Grid>\n          ) : null}\n        </Grid>\n      )\n    }\n\n    if (adapterSelection === 'TwoBitAdapter') {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"twoBitLocation\"\n              location={twoBitLocation}\n              setLocation={loc => setTwoBitLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)\"\n              location={chromSizesLocation}\n              setLocation={loc => setChromSizesLocation(loc)}\n            />\n          </Grid>\n        </Grid>\n      )\n    }\n\n    return null\n  },\n)\n\nconst AssemblyAddForm = observer(\n  ({\n    rootModel,\n    setFormOpen,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    setFormOpen: Function\n  }) => {\n    const classes = useStyles()\n\n    const adapterTypes = [\n      'IndexedFastaAdapter',\n      'BgzipFastaAdapter',\n      'TwoBitAdapter',\n    ]\n\n    const [assemblyName, setAssemblyName] = useState('')\n    const [assemblyDisplayName, setAssemblyDisplayName] = useState('')\n    const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0])\n    const [fastaLocation, setFastaLocation] = useState({ uri: '' })\n    const [faiLocation, setFaiLocation] = useState({ uri: '' })\n    const [gziLocation, setGziLocation] = useState({ uri: '' })\n    const [twoBitLocation, setTwoBitLocation] = useState({ uri: '' })\n    const [chromSizesLocation, setChromSizesLocation] = useState({ uri: '' })\n\n    function createAssembly() {\n      if (assemblyName === '') {\n        rootModel.session.notify(\"Can't create an assembly without a name\")\n      } else {\n        setFormOpen(false)\n        // setIsAssemblyBeingEdited(true)\n        let newAssembly\n        if (adapterSelection === 'IndexedFastaAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            displayName: assemblyDisplayName,\n            sequence: {\n              adapter: {\n                type: 'IndexedFastaAdapter',\n                fastaLocation,\n                faiLocation,\n              },\n            },\n          }\n        } else if (adapterSelection === 'BgzipFastaAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            displayName: assemblyDisplayName,\n            sequence: {\n              adapter: {\n                type: 'BgzipFastaAdapter',\n                fastaLocation,\n                faiLocation,\n                gziLocation,\n              },\n            },\n          }\n        } else if (adapterSelection === 'TwoBitAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            displayName: assemblyDisplayName,\n            sequence: {\n              adapter: {\n                type: 'TwoBitAdapter',\n                twoBitLocation,\n                chromSizesLocation,\n              },\n            },\n          }\n        }\n        rootModel.jbrowse.addAssemblyConf(newAssembly)\n        rootModel.session.notify(\n          `Successfully added ${assemblyName} assembly to JBrowse 2`,\n          'success',\n        )\n      }\n    }\n\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <TextField\n            id=\"assembly-name\"\n            inputProps={{ 'data-testid': 'assembly-name' }}\n            label=\"Assembly name\"\n            helperText=\"The assembly name e.g. hg38\"\n            variant=\"outlined\"\n            value={assemblyName}\n            onChange={event => setAssemblyName(event.target.value)}\n          />\n          <TextField\n            id=\"assembly-name\"\n            inputProps={{ 'data-testid': 'assembly-display-name' }}\n            label=\"Assembly display name\"\n            helperText='A human readable display name for the assembly e.g. \"Homo sapiens (hg38)\"'\n            variant=\"outlined\"\n            value={assemblyDisplayName}\n            onChange={event => setAssemblyDisplayName(event.target.value)}\n          />\n          <AdapterSelector\n            adapterSelection={adapterSelection}\n            setAdapterSelection={setAdapterSelection}\n            adapterTypes={adapterTypes}\n          />\n          <div className={classes.paperContent}>\n            <AdapterInput\n              adapterSelection={adapterSelection}\n              fastaLocation={fastaLocation}\n              setFastaLocation={setFastaLocation}\n              faiLocation={faiLocation}\n              setFaiLocation={setFaiLocation}\n              gziLocation={gziLocation}\n              setGziLocation={setGziLocation}\n              twoBitLocation={twoBitLocation}\n              setTwoBitLocation={setTwoBitLocation}\n              chromSizesLocation={chromSizesLocation}\n              setChromSizesLocation={setChromSizesLocation}\n            />\n          </div>\n        </Paper>\n        <Grid container className={classes.createButton}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<AddIcon />}\n              onClick={createAssembly}\n            >\n              Create new assembly\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  },\n)\n\nexport default AssemblyAddForm\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\n\nconst AssemblyEditor = observer(\n  ({\n    assembly,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assembly: any\n  }) => {\n    return <ConfigurationEditor model={{ target: assembly }} />\n  },\n)\n\nexport default AssemblyEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n} from '@material-ui/core'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport CloseIcon from '@material-ui/icons/Close'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport AssemblyTable from './AssemblyTable'\nimport AssemblyAddForm from './AssemblyAddForm'\nimport AssemblyEditor from './AssemblyEditor'\n\nconst useStyles = makeStyles(theme => ({\n  titleBox: {\n    color: '#fff',\n    backgroundColor: theme.palette.primary.main,\n    textAlign: 'center',\n  },\n  dialogContent: {\n    width: '100%',\n  },\n  backButton: {\n    color: '#fff',\n    position: 'absolute',\n    left: theme.spacing(4),\n    top: theme.spacing(4),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nconst AssemblyManager = observer(\n  ({\n    rootModel,\n    onClose,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    onClose: (arg: boolean) => void\n  }) => {\n    const classes = useStyles()\n    const [isFormOpen, setFormOpen] = useState(false)\n    const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false)\n    const [assemblyBeingEdited, setAssemblyBeingEdited] = useState()\n\n    const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited\n\n    return (\n      <Dialog open onClose={() => onClose(false)}>\n        <DialogTitle className={classes.titleBox}>\n          {showAssemblyTable ? 'Assembly manager' : null}\n          {isFormOpen ? (\n            <>\n              <IconButton\n                aria-label=\"back\"\n                className={classes.backButton}\n                onClick={() => setFormOpen(false)}\n              >\n                <ArrowBackIosIcon />\n              </IconButton>\n              Add new assembly\n            </>\n          ) : null}\n          {isAssemblyBeingEdited ? (\n            <>\n              <IconButton\n                aria-label=\"back\"\n                className={classes.backButton}\n                onClick={() => setIsAssemblyBeingEdited(false)}\n              >\n                <ArrowBackIosIcon />\n              </IconButton>\n              {returnAssemblyName(assemblyBeingEdited)}\n            </>\n          ) : null}\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={() => onClose(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <div className={classes.dialogContent}>\n            {showAssemblyTable ? (\n              <AssemblyTable\n                rootModel={rootModel}\n                setIsAssemblyBeingEdited={setIsAssemblyBeingEdited}\n                setAssemblyBeingEdited={setAssemblyBeingEdited}\n              />\n            ) : null}\n            {isAssemblyBeingEdited ? (\n              <AssemblyEditor assembly={assemblyBeingEdited} />\n            ) : null}\n            {isFormOpen ? (\n              <AssemblyAddForm\n                rootModel={rootModel}\n                setFormOpen={setFormOpen}\n              />\n            ) : null}\n          </div>\n        </DialogContent>\n        <DialogActions>\n          {showAssemblyTable ? (\n            <>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => onClose(false)}\n              >\n                Close\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                startIcon={<AddIcon />}\n                onClick={() => setFormOpen(true)}\n              >\n                Add new assembly\n              </Button>\n            </>\n          ) : null}\n        </DialogActions>\n      </Dialog>\n    )\n  },\n)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction returnAssemblyName(assembly: any) {\n  if (assembly !== undefined) {\n    return assembly.name\n  }\n  return null\n}\n\nexport default AssemblyManager\n"],"sourceRoot":""}