{"version":3,"sources":["../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","StatusMessage","trackAdapter","trackType","classes","type","Typography","className","subadapter","TrackAdapterSelector","adapterHint","model","session","getSession","TextField","value","label","helperText","select","fullWidth","onChange","event","setAdapterHint","target","SelectProps","SelectDisplayProps","getEnv","pluginManager","getElementTypesInGroup","filter","elt","name","map","MenuItem","key","UnknownAdapterPrompt","Link","href","rel","observer","trackName","assembly","warningMessage","unsupported","UNKNOWN","style","color","setTrackName","inputProps","setTrackType","setAssembly","assemblies","assemblyConf","assemblyName","readConfObject","root","display","flexDirection","paper","padding","TrackSourceSelect","Paper","description","location","trackData","setLocation","setTrackData","indexTrackData","setIndexTrackData","marginTop","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","stepContent","margin","alertContainer","steps","useState","activeStep","setActiveStep","trackErrorMessage","setTrackErrorMessage","handleNext","length","trackId","toLowerCase","replace","Date","now","adminMode","assemblyInstance","assemblyManager","get","addTrackConf","assemblyNames","adapter","sequenceAdapter","getConf","view","showTrack","notify","clearData","hideWidget","handleBack","undefined","isNextDisabled","Stepper","orientation","idx","Step","StepLabel","StepContent","step","getStepContent","Button","disabled","onClick","variant","data-testid","Alert","severity"],"mappings":"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","file":"static/js/56.e926f3fc.chunk.js","sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\nimport Link from '@material-ui/core/Link'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport React from 'react'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nfunction StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const classes = useStyles()\n  return trackAdapter.type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter{' '}\n      <code>{trackAdapter.type}</code> with subadapter{' '}\n      <code>{trackAdapter.subadapter?.type}</code>. Please enter a track name\n      and, if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{trackAdapter.type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n\nfunction TrackAdapterSelector({\n  adapterHint,\n  model,\n}: {\n  adapterHint: string\n  model: AddTrackModel\n}) {\n  const classes = useStyles()\n  const session = getSession(model)\n  return (\n    <TextField\n      className={classes.spacing}\n      value={adapterHint}\n      label=\"adapterType\"\n      helperText=\"An adapter type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setAdapterHint(event.target.value)\n      }}\n      SelectProps={{\n        // @ts-ignore\n        SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n      }}\n    >\n      {getEnv(session)\n        .pluginManager.getElementTypesInGroup('adapter')\n        // Exclude SNPCoverageAdapter from primary adapter user selection\n        .filter((elt: { name: string }) => elt.name !== 'SNPCoverageAdapter')\n        .map((elt: { name: string }) => (\n          <MenuItem key={elt.name} value={elt.name}>\n            {elt.name}\n          </MenuItem>\n        ))}\n    </TextField>\n  )\n}\n\nfunction UnknownAdapterPrompt({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const { adapterHint } = model\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        Was not able to guess the adapter type for this data, but it may be in\n        the list below. If not, you can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TrackAdapterSelector adapterHint={adapterHint} model={model} />\n    </>\n  )\n}\n\nfunction ConfirmTrack({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const session = getSession(model)\n  const {\n    trackName,\n    trackAdapter,\n    trackType,\n    assembly,\n    warningMessage,\n    adapterHint,\n  } = model\n\n  if (model.unsupported) {\n    return (\n      <Typography className={classes.spacing}>\n        This version of JBrowse cannot display data of this type. It is\n        possible, however, that there is a newer version that can display them.\n        You can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n    )\n  }\n  if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  }\n\n  if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  }\n\n  return (\n    <>\n      {trackAdapter ? (\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n      ) : null}\n      {warningMessage ? (\n        <Typography style={{ color: 'orange' }}>{warningMessage}</Typography>\n      ) : null}\n      <TrackAdapterSelector adapterHint={adapterHint} model={model} />\n      <TextField\n        className={classes.spacing}\n        label=\"trackName\"\n        helperText=\"A name for this track\"\n        fullWidth\n        value={trackName}\n        onChange={event => model.setTrackName(event.target.value)}\n        inputProps={{ 'data-testid': 'trackNameInput' }}\n      />\n      <TextField\n        className={classes.spacing}\n        value={trackType}\n        label=\"trackType\"\n        helperText=\"A track type\"\n        select\n        fullWidth\n        onChange={event => {\n          model.setTrackType(event.target.value)\n        }}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n        }}\n      >\n        {getEnv(session)\n          .pluginManager.getElementTypesInGroup('track')\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .map(({ name }: any) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n      </TextField>\n      <TextField\n        value={assembly}\n        label=\"assemblyName\"\n        helperText=\"Assembly to which the track will be added\"\n        select\n        fullWidth\n        onChange={event => {\n          model.setAssembly(event.target.value)\n        }}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n        }}\n      >\n        {session.assemblies.map(assemblyConf => {\n          const assemblyName = readConfObject(assemblyConf, 'name')\n          return (\n            <MenuItem key={assemblyName} value={assemblyName}>\n              {assemblyName}\n            </MenuItem>\n          )\n        })}\n      </TextField>\n    </>\n  )\n}\n\nexport default observer(ConfirmTrack)\n","import { FileSelector } from '@jbrowse/core/ui'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(1),\n  },\n}))\n\nfunction TrackSourceSelect({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <FileSelector\n          name=\"Main file\"\n          description=\"\"\n          location={model.trackData}\n          setLocation={model.setTrackData}\n        />\n        <FileSelector\n          name=\"Index file\"\n          description=\"Automatically inferred from the URL if not supplied\"\n          location={model.indexTrackData}\n          setLocation={model.setIndexTrackData}\n        />\n      </Paper>\n    </div>\n  )\n}\n\nexport default TrackSourceSelect\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { AddTrackModel } from '../model'\nimport { Alert } from '@material-ui/lab'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  stepContent: {\n    margin: theme.spacing(1),\n  },\n  alertContainer: {\n    padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nfunction AddTrackWidget({ model }: { model: AddTrackModel }) {\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n  const session = getSession(model)\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n  const [trackErrorMessage, setTrackErrorMessage] = useState<String>()\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep !== steps.length - 1) {\n      setActiveStep(activeStep + 1)\n      return\n    }\n\n    const trackId = `${trackName\n      .toLowerCase()\n      .replace(/ /g, '_')}-${Date.now()}${\n      session.adminMode ? '' : '-sessionTrack'\n    }`\n\n    const assemblyInstance = session.assemblyManager.get(assembly)\n\n    if (trackAdapter && trackAdapter.type !== 'UNKNOWN') {\n      // @ts-ignore\n      session.addTrackConf({\n        trackId,\n        type: trackType,\n        name: trackName,\n        assemblyNames: [assembly],\n        adapter: {\n          ...trackAdapter,\n          sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n        },\n      })\n      if (model.view) {\n        model.view.showTrack(trackId)\n      } else {\n        session.notify(\n          'Open a new view, or use the track selector in an existing view, to view this track',\n          'info',\n        )\n      }\n      model.clearData()\n      // @ts-ignore\n      session.hideWidget(model)\n    } else {\n      setTrackErrorMessage(\n        'Failed to add track.\\nThe configuration of this file is not currently supported.',\n      )\n    }\n  }\n\n  function handleBack() {\n    setTrackErrorMessage(undefined)\n    setActiveStep(activeStep - 1)\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n              {trackErrorMessage ? (\n                <div className={classes.alertContainer}>\n                  <Alert severity=\"error\">{trackErrorMessage}</Alert>\n                </div>\n              ) : null}\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddTrackWidget)\n"],"sourceRoot":""}