{"version":3,"sources":["../../../plugins/sequence/src/IndexedFastaAdapter/IndexedFastaAdapter.ts"],"names":["config","fasta","seqCache","AbortablePromiseCache","cache","LRU","maxSize","fill","args","signal","a","refName","start","end","getSequence","fastaLocation","readConfObject","faiLocation","fastaOpts","openLocation","fai","IndexedFasta","opts","this","getSequenceNames","getSequenceSizes","seqSizes","Object","keys","map","region","ObservableCreate","observer","getSequenceSize","size","regionEnd","undefined","Math","min","chunks","e","chunkSize","chunkStart","s","r","push","get","JSON","stringify","Promise","all","seq","join","slice","next","SimpleFeature","id","data","complete","BaseFeatureDataAdapter"],"mappings":"8WA6BE,WAAmBA,GAA+B,2BAChD,cAAMA,IAdEC,WAawC,IAX1CC,SAAW,IAAIC,IAAsB,CAC3CC,MAAO,IAAIC,IAAI,CAAEC,QAAS,MAC1BC,KAAM,WAAF,4BAAE,WACJC,EACAC,GAFI,mBAAAC,EAAA,6DAIIC,EAAwBH,EAAxBG,QAASC,EAAeJ,EAAfI,MAAOC,EAAQL,EAARK,IAJpB,kBAKG,EAAKZ,MAAMa,YAAYH,EAASC,EAAOC,EAAvC,2BAAiDL,GAAjD,IAAuDC,aAL1D,2CAAF,qDAAE,KAWN,IAAMM,EAAgBC,yBAAehB,EAAQ,iBACvCiB,EAAcD,yBAAehB,EAAQ,eACrCkB,EAAY,CAChBjB,MAAOkB,uBAAaJ,GACpBK,IAAKD,uBAAaF,IAN4B,OAShD,EAAKhB,MAAQ,IAAIoB,eAAaH,GATkB,E,+CAYlD,SAAmBI,GACjB,OAAOC,KAAKtB,MAAMuB,iBAAiBF,K,+DAGrC,WAAwBA,GAAxB,uFACyBC,KAAKtB,MAAMwB,iBAAiBH,GADrD,cACQI,EADR,yBAESC,OAAOC,KAAKF,GAAUG,KAAI,SAAAlB,GAAO,MAAK,CAC3CA,UACAC,MAAO,EACPC,IAAKa,EAASf,QALlB,gD,gFAcA,SAAmBmB,EAA0BR,GAAoB,WACvDX,EAAwBmB,EAAxBnB,QAASC,EAAekB,EAAflB,MAAOC,EAAQiB,EAARjB,IACxB,OAAOkB,2BAAgB,uCAAU,WAAMC,GAAN,+BAAAtB,EAAA,sEACZ,EAAKT,MAAMgC,gBAAgBtB,EAASW,GADxB,OAQ/B,IAPMY,EADyB,OAEzBC,OAAqBC,IAATF,EAAqBG,KAAKC,IAAIJ,EAAMrB,GAAOA,EACvD0B,EAAS,GAITC,EAAI3B,IAHJ4B,EAAY,OAGY5B,EAAM4B,GAC3BC,EAFHC,EAAI/B,EAASA,EAAQ6B,EAEFC,EAAaF,EAAGE,GAAcD,EAC/CG,EAAI,CACRjC,UACAC,MAAO8B,EACP7B,IAAK6B,EAAaD,GAEpBF,EAAOM,KAAK,EAAK3C,SAAS4C,IAAIC,KAAKC,UAAUJ,GAAIA,EAArC,OAAwCtB,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAMb,SAd7B,iBAgBZwC,QAAQC,IAAIX,GAhBA,SAgBzBY,EAhByB,OAiB5BC,KAAK,IACLC,MAAMzC,EAAQ+B,GACdU,MAAM,EAAGxC,EAAMD,KAEhBoB,EAASsB,KACP,IAAIC,IAAc,CAChBC,GAAI,GAAF,OAAK7C,EAAL,YAAgBC,EAAhB,YAAyBuB,GAC3BsB,KAAM,CAAE9C,UAASC,QAAOC,IAAKsB,EAAWgB,UAI9CnB,EAAS0B,WA5BsB,4CAAV,yD,2BAqCzB,gB,GAnF2BC","file":"static/js/70.5d3c277d.chunk.js","sourcesContent":["import { IndexedFasta } from '@gmod/indexedfasta'\nimport {\n  BaseFeatureDataAdapter,\n  SequenceAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation, NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from '@jbrowse/core/util/QuickLRU'\n\nexport default class extends BaseFeatureDataAdapter implements SequenceAdapter {\n  protected fasta: typeof IndexedFasta\n\n  private seqCache = new AbortablePromiseCache({\n    cache: new LRU({ maxSize: 200 }),\n    fill: async (\n      args: { refName: string; start: number; end: number },\n      signal?: AbortSignal,\n    ) => {\n      const { refName, start, end } = args\n      return this.fasta.getSequence(refName, start, end, { ...args, signal })\n    },\n  })\n\n  public constructor(config: AnyConfigurationModel) {\n    super(config)\n    const fastaLocation = readConfObject(config, 'fastaLocation')\n    const faiLocation = readConfObject(config, 'faiLocation')\n    const fastaOpts = {\n      fasta: openLocation(fastaLocation as FileLocation),\n      fai: openLocation(faiLocation as FileLocation),\n    }\n\n    this.fasta = new IndexedFasta(fastaOpts)\n  }\n\n  public getRefNames(opts?: BaseOptions) {\n    return this.fasta.getSequenceNames(opts)\n  }\n\n  public async getRegions(opts?: BaseOptions) {\n    const seqSizes = await this.fasta.getSequenceSizes(opts)\n    return Object.keys(seqSizes).map(refName => ({\n      refName,\n      start: 0,\n      end: seqSizes[refName],\n    }))\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures(region: NoAssemblyRegion, opts?: BaseOptions) {\n    const { refName, start, end } = region\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.fasta.getSequenceSize(refName, opts)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const chunks = []\n      const chunkSize = 128000\n\n      const s = start - (start % chunkSize)\n      const e = end + (chunkSize - (end % chunkSize))\n      for (let chunkStart = s; chunkStart < e; chunkStart += chunkSize) {\n        const r = {\n          refName,\n          start: chunkStart,\n          end: chunkStart + chunkSize,\n        }\n        chunks.push(this.seqCache.get(JSON.stringify(r), r, opts?.signal))\n      }\n      const seq = (await Promise.all(chunks))\n        .join('')\n        .slice(start - s)\n        .slice(0, end - start)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}